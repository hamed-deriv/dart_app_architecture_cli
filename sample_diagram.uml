@startuml
set namespaceSeparator ::

class "sample_component::data::repositories::sample_repository.dart::SampleRepository" {
  +SampleMapper mapper
  +Future<SampleEntity> fetch()
}

"sample_component::data::repositories::sample_repository.dart::SampleRepository" o-- "sample_component::data::sample_mapper.dart::SampleMapper"
"sample_component::domain::base_sample_repository.dart::BaseSampleRepository" <|-- "sample_component::data::repositories::sample_repository.dart::SampleRepository"

class "sample_component::data::sample_mapper.dart::SampleMapper" {
  +SampleModel fromEntity()
  +SampleEntity toEntity()
}

"architecture::data::base_mapper.dart::BaseMapper" <|-- "sample_component::data::sample_mapper.dart::SampleMapper"

class "sample_component::data::sample_model.dart::SampleModel" {
  +int firstField
  +bool? thirdField
  +String? secondField
  +Map<String, dynamic> toJson()
}

"architecture::data::base_model.dart::BaseModel" <|-- "sample_component::data::sample_model.dart::SampleModel"

class "sample_component::domain::sample_entity.dart::SampleEntity" {
  +int firstField
  +bool? thirdField
  +String? secondField
  +List<Object?> props
  +bool stringify
}

"equatable::src::equatable_mixin.dart::EquatableMixin" <|-- "sample_component::domain::sample_entity.dart::SampleEntity"
"architecture::domain::base_entity.dart::BaseEntity" <|-- "sample_component::domain::sample_entity.dart::SampleEntity"

abstract class "sample_component::domain::base_sample_repository.dart::BaseSampleRepository" {
  +SampleMapper mapper
  +Future<SampleEntity> fetch()
}

"sample_component::domain::base_sample_repository.dart::BaseSampleRepository" o-- "sample_component::data::sample_mapper.dart::SampleMapper"
"architecture::domain::base_repository.dart::BaseRepository" <|-- "sample_component::domain::base_sample_repository.dart::BaseSampleRepository"

class "sample_component::domain::sample_service.dart::SampleService" {
  +BaseSampleRepository repository
  +Future<SampleEntity> fetch()
}

"sample_component::domain::sample_service.dart::SampleService" o-- "sample_component::domain::base_sample_repository.dart::BaseSampleRepository"
"architecture::domain::base_service.dart::BaseService" <|-- "sample_component::domain::sample_service.dart::SampleService"

class "sample_component::presentation::sample_cubit.dart::SampleCubit" {
}

"architecture::presentation::state_manager::base_cubit.dart::BaseCubit" <|-- "sample_component::presentation::sample_cubit.dart::SampleCubit"

class "sample_component::presentation::sample_widget.dart::SampleWidget" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "sample_component::presentation::sample_widget.dart::SampleWidget"

class "component_generator::model_structure.dart::ModelStructure" {
  +String name
  +Type type
  +bool isNullable
  +bool isRequired
  +String getConstructorDefinition
  +String getFieldDefinition
  +String getFromJsonDefinition
  +String getToJsonDefinition
}

abstract class "architecture::data::base_mapper.dart::BaseMapper" {
  +Model fromEntity()
  +Entity toEntity()
}

class "architecture::data::base_model.dart::BaseModel" {
}

abstract class "architecture::domain::base_repository.dart::BaseRepository" {
  +BaseMapper<Entity, Model> mapper
}

"architecture::domain::base_repository.dart::BaseRepository" o-- "architecture::data::base_mapper.dart::BaseMapper<Entity, Model>"

abstract class "architecture::domain::base_service.dart::BaseService" {
  +BaseRepository<Entity, Model> repository
}

"architecture::domain::base_service.dart::BaseService" o-- "architecture::domain::base_repository.dart::BaseRepository<Entity, Model>"

abstract class "architecture::domain::base_entity.dart::BaseEntity" {
}

class "architecture::presentation::state_manager::base_state_status.dart::BaseStateStatus" {
  +int index
  {static} +List<BaseStateStatus> values
  {static} +BaseStateStatus initial
  {static} +BaseStateStatus loading
  {static} +BaseStateStatus success
  {static} +BaseStateStatus failure
}

"architecture::presentation::state_manager::base_state_status.dart::BaseStateStatus" o-- "architecture::presentation::state_manager::base_state_status.dart::BaseStateStatus"
"dart::core::Enum" <|-- "architecture::presentation::state_manager::base_state_status.dart::BaseStateStatus"

class "architecture::presentation::state_manager::base_state.dart::BaseState" {
  +BaseStateStatus status
  +Entity? data
  +String? error
  +List<Object?> props
  +String toString()
}

"architecture::presentation::state_manager::base_state.dart::BaseState" o-- "architecture::presentation::state_manager::base_state_status.dart::BaseStateStatus"
"equatable::src::equatable_mixin.dart::EquatableMixin" <|-- "architecture::presentation::state_manager::base_state.dart::BaseState"

abstract class "architecture::presentation::state_manager::base_cubit.dart::BaseCubit" {
  +BaseService<Entity, Model>? service
}

"architecture::presentation::state_manager::base_cubit.dart::BaseCubit" o-- "architecture::domain::base_service.dart::BaseService<Entity, Model>"
"bloc::src::bloc.dart::Cubit" <|-- "architecture::presentation::state_manager::base_cubit.dart::BaseCubit"

class "architecture::presentation::base_widget.dart::BaseWidget" {
  +String cubitKey
  +Widget Function(BuildContext, BaseState<BaseEntity>) initialWidgetBuilder
  +Widget Function(BuildContext, BaseState<BaseEntity>) loadingWidgetBuilder
  +Widget Function(BuildContext, BaseState<BaseEntity>) successWidgetBuilder
  +Widget Function(BuildContext, BaseState<BaseEntity>) errorWidgetBuilder
  +Widget build()
}

"architecture::presentation::base_widget.dart::BaseWidget" o-- "architecture::presentation::base_widget.dart::Widget Function(BuildContext, BaseState<BaseEntity>)"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "architecture::presentation::base_widget.dart::BaseWidget"

@enduml